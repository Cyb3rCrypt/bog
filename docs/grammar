root : (stmt NL)* EOF

stmt
    : decl "=" block_or_expr
    | expr

decl : ("let" | "const") primary_expr

expr
    : fn
    | jump_expr
    | bool_expr assign?

block_or_expr : block | expr

block : NL BEGIN (stmt NL)+ END

assign : ("=" | "+=" | "-=" | "*=" | "**=" | "/=" | "//=" | "%=" | "<<=" | ">>=" | "&=" | "|=" | "^=") block_or_expr

jump_expr : "return" block_or_expr? | "break" | "continue"

fn : "fn" "(" (primary_expr ",")* primary_expr? ")" block_or_expr

bool_expr
    : "not" comparision_expr
    | comparision_expr ("or" comparision_expr)*
    | comparision_expr ("and" comparision_expr)*

comparision_expr
    : range_expr (("<" | "<=" | ">" | ">="| "==" | "!=" | "in") range_expr)?
    | range_expr ("is" type_name)?

type_name : "none" | "int" | "num" | "bool" | "str" | "tuple" | "map" | "list" | "error" | "range" | "fn"

range_expr : bit_expr? (":" bit_expr? (":" bit_expr?)?)

bit_expr : shift_expr (("&" shift_expr)* | ("|" shift_expr)* | ("^" shift_expr)* | ("catch" ("(" decl ")")? block_or_expr))?

shift_expr : add_expr (("<<" | ">>") add_expr)?

add_expr : mul_expr (("-" | "+") mul_expr)*

mul_expr : cast_expr (("*" | "/" | "//" | "%") cast_expr)*

cast_expr : prefix_expr ("as" type_name)?

prefix_expr : ("try" | "-" | "+" | "~")? power_expr

power_expr : primary_expr suffix_expr* ("**" power_expr)?

suffix_expr
    : "[" expr "]"
    | "(" (expr ",")* expr? ")"
    | "." IDENTIFIER

primary_expr
    : IDENTIFIER
    | "_"
    | STRING
    | NUMBER
    | "true"
    | "false"
    | "this"
    | "(" ")"
    | initializer
    | "error" initializer?
    | "@" IDENTIFIER initializer?
    | "import" "(" STRING ")"
    | if
    | while
    | for
    | match

initializer
    : "(" block_or_expr ")"
    | "(" (expr ",")+ expr? ")"
    | "{" (expr "=" expr ",")* (expr "=" expr)? "}"
    | "[" (expr ",")* expr? "]"

if : "if" "(" (decl "=")? expr ")" block_or_expr ("else" block_or_expr)?

while : "while" "(" (decl "=")? expr ")" block_or_expr

for : "for" "(" (decl "in")? expr ")" block_or_expr

match : "match" "(" expr ")" (NL match_case)+ NL

match_case
    : decl "=>" block_or_expr
    | expr ("," expr)* ","? "=>" block_or_expr
